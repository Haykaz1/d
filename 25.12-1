using System;

Type myType = typeof(Person);
 
Console.WriteLine(myType); 
 
public class Person
{
    public string Name { get;}
    public Person(string name) => Name = name;
}
_________________________________________________________________________
using System;

Type myType = Type.GetType("PeopleTypes.Person", false, true);
 
Console.WriteLine(myType);  
 
namespace PeopleTypes
{
    public class Person
    {
        public string Name { get;}
        public Person(string name) => Name = name;
    }
}
_________________________________________________________________________
using System;

Type myType = typeof(PeopleTypes.Person);
 
Console.WriteLine($"Name: {myType.Name}");             
Console.WriteLine($"Full Name: {myType.FullName}");     
Console.WriteLine($"Namespace: {myType.Namespace}");    
Console.WriteLine($"Is struct: {myType.IsValueType}");  
Console.WriteLine($"Is class: {myType.IsClass}");       
 
namespace PeopleTypes
{
    class Person
    {
        public string Name { get; }
        public Person(string name) => Name = name;
    }
}
___________________________________________________________________________
using System;

Type myType = typeof(Person);
 
Console.WriteLine("Реализованные интерфейсы:");
foreach (Type i in myType.GetInterfaces())
{
    Console.WriteLine(i.Name);
}
 
public class Person : IEater, IMovable
{
    public string Name { get;}
    public Person(string name) => Name = name;
    public void Eat() => Console.WriteLine($"{Name} eats");
 
    public void Move()=> Console.WriteLine($"{Name} moves");
}
interface IEater
{
    void Eat();
}
interface IMovable
{
    void Move();
}
