using System;
using System.Reflection;
 
Type myType = typeof(Printer);
 
Console.WriteLine("Методы:");
foreach (MethodInfo method in myType.GetMethods())
{
    string modificator = "";
	
    if (method.IsStatic) modificator += "static ";
    if (method.IsVirtual) modificator += "virtual ";
 
    Console.WriteLine($"{modificator}{method.ReturnType.Name} {method.Name} ()");
}
class Printer
{
    public string DefaultMessage { get; set; } = "Hello";
    public void PrintMessage(string message, int times = 1)
    {
        while (times-- > 0) Console.WriteLine(message);
    }
    public string CreateMessage() => DefaultMessage;
}
___________________________________________________________________________________________
using System;
using System.Reflection;
 
Type myType = typeof(Printer);
 
Console.WriteLine("Методы:");
foreach (MethodInfo method in myType.GetMethods(BindingFlags.DeclaredOnly
            | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))
{
    Console.WriteLine($"{method.ReturnType.Name} {method.Name} ()");
}
class Printer
{
    public string DefaultMessage { get; set; } = "Hello";
    protected internal void PrintMessage(string message, int times = 1)
    {
        while (times-- > 0) Console.WriteLine(message);
    }
    private string CreateMessage() => DefaultMessage;
}
__________________________________________________________________________________________________
using System;
 
var myPrinter = new Printer();
var createMessage = typeof(Printer).GetMethod("CreateMessage");
var result = createMessage?.Invoke(myPrinter, parameters: null);
Console.WriteLine(result); 
 
class Printer
{
    public string CreateMessage() => "Hello Metanit.com";
}
___________________________________________________________________________________________________
using System;
 
var myPrinter = new Printer();
var printMessage = typeof(Printer).GetMethod("PrintMessage");
printMessage?.Invoke(myPrinter, new object[] {"Hi world", 3});
 
class Printer
{
    public void PrintMessage(string message, int times)
    {
        while (times-- > 0) Console.WriteLine(message);
    }
} 
_____________________________________________________________________________________________________________
using System;
 
var myPrinter = new Printer();
var printValue = typeof(Printer).GetMethod("PrintValue");
var printStringValue = printValue?.MakeGenericMethod(typeof(string));
printStringValue?.Invoke(myPrinter, new object[] {"Hello world"});
 
class Printer
{
    public void PrintValue<T>(T value)
    {
        Console.WriteLine(value);
    }
} 
_________________________________________________________________________________________________________________
using System;
using System.Reflection;
 
Type myType = typeof(Person);
 
Console.WriteLine("Конструкторы:");
foreach (ConstructorInfo ctor in myType.GetConstructors(
    BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))
{
    string modificator = "";
    if (ctor.IsPublic)
        modificator += "public";
    else if (ctor.IsPrivate)
        modificator += "private";
    else if (ctor.IsAssembly)
        modificator += "internal";
    else if (ctor.IsFamily)
        modificator += "protected";
    else if (ctor.IsFamilyAndAssembly)
        modificator += "private protected";
    else if (ctor.IsFamilyOrAssembly)
        modificator += "protected internal";
 
    Console.Write($"{modificator} {myType.Name}(");
    ParameterInfo[] parameters = ctor.GetParameters();
    for (int i = 0; i < parameters.Length; i++)
    {
        var param = parameters[i];
        Console.Write($"{param.ParameterType.Name} {param.Name}");
        if (i < parameters.Length - 1) Console.Write(", ");
    }
    Console.WriteLine(")");
}
class Person
{
    public string Name { get; }
    public int Age { get; }
    public Person(string name, int age)
    {
        Name = name; Age = age;
    }
    public Person(string name) : this(name, 1) { }
    private Person() : this("Tom") { }
} 
