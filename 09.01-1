using System;
using System.Collections.Generic;

dynamic person = new System.Dynamic.ExpandoObject();
person.Name = "Tom";
person.Age = 46;
person.Languages = new List<string> { "english", "german", "french" };
 
Console.WriteLine($"{person.Name} - {person.Age}");
foreach (var lang in person.Languages)
    Console.WriteLine(lang);
 
person.IncrementAge = (Action<int>)(x => person.Age += x);
person.IncrementAge(6);
Console.WriteLine($"{person.Name} - {person.Age}");
____________________________________________________________________________________________________________________
using System;
using System.Dynamic;
using System.Collections.Generic;

dynamic person = new PersonObject();
person.Name = "Tom";
person.Age = 23;
Func<int, int> increment = (int n) => { person.Age += n; return person.Age; };
person.IncrementAge = increment;
 
Console.WriteLine($"{person.Name} - {person.Age}"); 
person.IncrementAge(4); 
Console.WriteLine($"{person.Name} - {person.Age}"); 

class PersonObject : DynamicObject
{
    Dictionary<string, object> members = new Dictionary<string, object>();
 
    public override bool TrySetMember(SetMemberBinder binder, object value)
    {
        if(value is not null)
        {
            members[binder.Name] = value;
            return true;
        }
        return false;
    }
    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
        result = null;
        if (members.ContainsKey(binder.Name))
        {
            result = members[binder.Name];
            return true;
        }
        return false;
    }
    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
        result = null;
        if(args?[0] is int number)
        {
            dynamic method = members[binder.Name];
            result = method(number);
        }
        return result != null;
    }
}
